package com.paas.controller.sys_members;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.paas.model.sys_members.Sys_members;
import com.paas.service.sys_members.ISys_membersService;
import com.paas.utils.MD5Encryption;
import com.paas.utils.TokenUtils;
import com.paas.utils.TokenUtils.TokenBean;
@Controller
public class Sys_membersController {
	@Autowired
	private ISys_membersService iSys_membersService;
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	Logger logger = Logger.getLogger("PaasLogger");
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/addSys_members")
	@ResponseBody
	public Map add(Sys_members sys_members){
		Map resultMap=new HashMap();
		try {
			iSys_membersService.addSys_members(sys_members);
			resultMap.put("status", "0");
			resultMap.put("msg", sys_members.getId());
			logger.info("新建成功，主键："+sys_members.getId());
		} catch (Exception e) {
			resultMap.put("status", "-1");
			resultMap.put("msg", "新建失败！");
			logger.info("新建失败！"+e.getLocalizedMessage());
			e.printStackTrace();
		}
		return resultMap;
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/deleteSys_members")
	@ResponseBody
	public Map delete(Sys_members sys_members){
		Map resultMap=new HashMap();
		try {
			if(sys_members.getId()==null){
				resultMap.put("status", "-1");
				resultMap.put("msg", "参数不能为空！");
			}
			else{
				int resultDelete=iSys_membersService.deleteSys_members(sys_members.getId()+"");
				resultMap.put("status", "0");
				resultMap.put("msg", "删除成功！");
				logger.info("删除成功，主键："+sys_members.getId());
			}
		} catch (Exception e) {
			resultMap.put("status", "-1");
			resultMap.put("msg", "删除失败！");
			logger.info("删除失败！"+e.getLocalizedMessage());
			e.printStackTrace();
		}
		return resultMap;
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/selectSys_members")
	@ResponseBody
	public Map select(Sys_members sys_members){
		Map resultMap=new HashMap();
		try {
			if(sys_members.getId()==null){
				resultMap.put("status", "-1");
				resultMap.put("msg", "参数不能为空！");
			}
			else{
				Sys_members resultSelect=iSys_membersService.selectSys_membersById(sys_members.getId()+"");
				resultMap.put("status", "0");
				resultMap.put("msg", resultSelect);
			}
		} catch (Exception e) {
			resultMap.put("status", "-1");
			resultMap.put("msg", "查询失败！");
			logger.info("查询失败！"+e.getLocalizedMessage());
			e.printStackTrace();
		}
		return resultMap;
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/updateSys_members")
	@ResponseBody
	public Map update(Sys_members sys_members){
		Map resultMap=new HashMap();
		try {
			if(sys_members.getId()==null){
				resultMap.put("status", "-1");
				resultMap.put("msg", "参数不能为空！");
			}
			else{
				if(sys_members.getUserpwd()!=null){
					sys_members.setUserpwd(MD5Encryption.getEncryption(sys_members.getUserpwd()).toLowerCase());
				}
				int resultUpdate=iSys_membersService.updateSys_members(sys_members);
				resultMap.put("status", "0");
				resultMap.put("msg", "更新成功！");
				logger.info("更新成功，主键："+sys_members.getId());
			}
		} catch (Exception e) {
			resultMap.put("status", "-1");
			resultMap.put("msg", "更新失败！");
			logger.info("更新失败！"+e.getLocalizedMessage());
			e.printStackTrace();
		}
		return resultMap;
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/resetPasswrod")
	@ResponseBody
	public Map resetPasswrod(Sys_members sys_members){
		Map resultMap=new HashMap();
		try {
			if(sys_members.getUsername()==null){
				resultMap.put("status", "-1");
				resultMap.put("msg", "参数不能为空！");
			}
			else{
				if(sys_members.getUserpwd()!=null){
					sys_members.setUserpwd(MD5Encryption.getEncryption(sys_members.getUserpwd()).toLowerCase());
				}
				int resultUpdate=iSys_membersService.updateSys_membersPassword(sys_members);
				resultMap.put("status", "0");
				resultMap.put("msg", "更新成功！");
				logger.info("更新成功，主键："+sys_members.getId());
			}
		} catch (Exception e) {
			resultMap.put("status", "-1");
			resultMap.put("msg", "更新失败！");
			logger.info("更新失败！"+e.getLocalizedMessage());
			e.printStackTrace();
		}
		return resultMap;
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/listSys_members")
	@ResponseBody
	public Map list(HttpServletRequest request, HttpServletResponse response,Sys_members sys_members)
		throws ServletException, IOException {
		Map resultMap=new HashMap();
		try {
			String page=request.getParameter("page");
			String size=request.getParameter("size");
			if(page!=null&&size!=null){
				Map paramMap=new HashMap();
				paramMap.put("fromPage",(Integer.parseInt(page)-1)*Integer.parseInt(size));
				paramMap.put("toPage",Integer.parseInt(size)); 
				paramMap.put("id",sys_members.getId());
				paramMap.put("org_id",sys_members.getOrg_id());
				paramMap.put("rig_id",sys_members.getRig_id());
				paramMap.put("mem_id",sys_members.getMem_id());
				paramMap.put("username",sys_members.getUsername());
				paramMap.put("userpwd",sys_members.getUserpwd());
				paramMap.put("displayname",sys_members.getDisplayname());
				paramMap.put("status",sys_members.getStatus());
				String c_dtFrom=request.getParameter("c_dtFrom");
				String c_dtTo=request.getParameter("c_dtTo");
				if(c_dtFrom!=null&&!c_dtFrom.equals(""))
				paramMap.put("c_dtFrom", sdf.parse(c_dtFrom));
				if(c_dtTo!=null&&!c_dtTo.equals(""))
				paramMap.put("c_dtTo", sdf.parse(c_dtTo));
				String up_dtFrom=request.getParameter("up_dtFrom");
				String up_dtTo=request.getParameter("up_dtTo");
				if(up_dtFrom!=null&&!up_dtFrom.equals(""))
				paramMap.put("up_dtFrom", sdf.parse(up_dtFrom));
				if(up_dtTo!=null&&!up_dtTo.equals(""))
				paramMap.put("up_dtTo", sdf.parse(up_dtTo));
				List<Sys_members> list=iSys_membersService.selectSys_membersByParam(paramMap);
				int totalnumber=iSys_membersService.selectCountSys_membersByParam(paramMap);
				Map tempMap=new HashMap();
				resultMap.put("status", "0");
				tempMap.put("num", totalnumber);
				tempMap.put("data", list);
				resultMap.put("msg", tempMap);
			}
			else{
				resultMap.put("status", "-1");
				resultMap.put("msg", "分页参数不能为空！");
			}
		} catch (Exception e) {
			resultMap.put("status", "-1");
			resultMap.put("msg", "查询失败！");
			logger.info("查询失败！"+e.getLocalizedMessage());
			e.printStackTrace();
		}
		return resultMap;
	}
	@InitBinder  
	public void initBinder(WebDataBinder binder) {  
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
		dateFormat.setLenient(false);  
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));  
	} 
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/login")
	@ResponseBody
	public Map login(HttpServletRequest request,Sys_members sys_members){
		Map resultMap=new HashMap();
		try {
			if(sys_members.getUsername()!=null&&sys_members.getUserpwd()!=null){
				
				Map paramMap=new HashMap();
				paramMap.put("fromPage",0);
				paramMap.put("toPage",1); 
				paramMap.put("username",sys_members.getUsername());
				List<Sys_members> list=iSys_membersService.selectSys_membersByParam(paramMap);
				if(list.size()>0){
					if(list.get(0).getUserpwd().equals(MD5Encryption.getEncryption(sys_members.getUserpwd()).toLowerCase())){
						String userToken= UUID.randomUUID().toString();
						 
						resultMap.put("status", "0");
						resultMap.put("token", userToken);
						resultMap.put("msg", list.get(0));
						logger.info("用户登录："+list.get(0).getUsername());
						TokenUtils.TokenBean tokenBean =new TokenUtils().new TokenBean();
						tokenBean.setTimesamp(System.currentTimeMillis()+"");
						tokenBean.setUsername(list.get(0).getUsername());
						tokenBean.setUserid(list.get(0).getId()+"");
	  					TokenUtils.add(userToken, tokenBean);
					}
					else{
						resultMap.put("status", "-1");
						resultMap.put("msg", "密码错误！");
					}
					
				}
				else{
					resultMap.put("status", "-1");
					resultMap.put("msg", "用户名不存在！");
				}
				
			}
			else{
				resultMap.put("status", "-1");
				resultMap.put("msg", "用户名或密码不能为空！");
			}
			 
			 
		} catch (Exception e) {
			resultMap.put("status", "-1");
			resultMap.put("msg", "登录失败！");
			logger.info("登录失败！"+e.getLocalizedMessage());
			e.printStackTrace();
		}
		return resultMap;
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/register")
	@ResponseBody
	public Map register(Sys_members sys_members){
		Map resultMap=new HashMap();
		try {
			
			Map paramMap=new HashMap();
			paramMap.put("fromPage",0);
			paramMap.put("toPage",1); 
			paramMap.put("username",sys_members.getUsername());
			List<Sys_members> list=iSys_membersService.selectSys_membersByParam(paramMap);
			if(list.size()>0){
				if(sys_members.getUsername()==null){
					resultMap.put("status", "-1");
					resultMap.put("msg", "用户名为空！");
				}
				else if(sys_members.getUserpwd()==null){
					resultMap.put("status", "-1");
					resultMap.put("msg", "密码为空！");
				}
				else{ 
					sys_members.setUserpwd(MD5Encryption.getEncryption(sys_members.getUserpwd()).toLowerCase());
					iSys_membersService.addSys_members(sys_members);
					resultMap.put("status", "0");
					resultMap.put("msg", sys_members.getId());
					logger.info("注册成功，主键："+sys_members.getId());
				}
			}
			else{
				resultMap.put("status", "-1");
				resultMap.put("msg", "用户已存在！");
			}
			
			
		} catch (Exception e) {
			resultMap.put("status", "-1");
			resultMap.put("msg", "注册失败！");
			logger.info("注册失败！"+e.getLocalizedMessage());
			e.printStackTrace();
		}
		return resultMap;
	}
}
